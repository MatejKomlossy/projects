truncate table genres,movies,movies_genres,screening_rooms,screenings,seats,customers,orders,ticket_types,discount_coupons,tickets;


---- pomocne tabulky na generovanie dat

-- first names

drop table if exists first_names cascade;
create table first_names
(
    first_name varchar
);

insert into first_names (first_name)
values	('Alcott'), ('Alder'), ('Aldrich'), ('Pagination'), ('Alfred'),
	('Allard'), ('Allston'), ('Wilson'), ('Thomas'), ('Eartha'),
	('John'), ('Alton'), ('Alvin'), ('Corliss'), ('Courtney'),
	('Demelza'), ('Walter'), ('James'), ('Jack'), ('Ethel'),
	('Gabriel'), ('Harrison'), ('Cody'), ('Farrah'), ('Fern'),
	('Michael'), ('Jim'), ('Joe'), ('Fiona'), ('Godiva'),
	('Edward'), ('Golda'), ('Roger'), ('Rafael'), ('Harrison'),
	('Harmony'), ('Hazel'), ('Harry'), ('Hedwig'), ('Hertha'),
	('Holly'), ('Susan'), ('Peter'), ('Indiana'), ('Louis'),('Tobias'),
	('George'), ('Rupert'), ('Jesse'), ('Sherlock'), ('Daniel'),('Dwight');

-- last names

drop table if exists last_names cascade;
create table last_names
(
    last_name varchar
);

insert into last_names (last_name)
values	('Schrute'), ('Halpert'), ('Berkeley'), ('Jones'), ('Freeman'),
	('Potter'), ('Downey'), ('Brock'), ('White'), ('Roberts'),
	('Chubb'), ('Larsson'), ('Cumberbatch'), ('Reeves'), ('Hiddleston'),
	('Portman'), ('Dennings'), ('Watson'), ('Hopkins'), ('Hemsworth'),
	('Gates'), ('Jobs'), ('Mars'), ('Hetfield'), ('Ulrich'),
	('Trujillo'), ('Hammet'), ('Newsted'), ('Jackman'), ('Klein'),
	('Cooper'), ('Disney'), ('Dodson'), ('Doge'), ('Ford'),
	('Fern'), ('Fick'), ('Gallop'), ('Game'), ('Goodman'),
	('Schrader'), ('Toshiba'), ('Mustaine'), ('Forge'), ('Osbourne'),
	('Brown'), ('Rowling'), ('Tolkien'), ('Doyle'), ('Sapkowski');

create or replace function random_first_name() returns varchar language sql as
$$
select first_name from first_names tablesample system_rows(10) order by random() limit 1
$$;

create or replace function random_last_name() returns varchar language sql as
$$
select last_name from last_names tablesample system_rows(10) order by random() limit 1
$$;

----genres----
insert into genres(name)
select 'zaner' || id
from generate_series(1,15) as seq(id);

------movies---------
insert into movies(name,length,year_of_release)
select 'meno_filmu' || id,
time '1:00:00' + floor(random() * 60*60+1) * time ' 00:00:01',
floor(2000 + random() * 20)
from generate_series(1,50000) as seq(id);


-------movies_genres-----------
create or replace function random_genre() returns integer language sql as
$$
select id from genres tablesample system_rows(10) order by random() limit 1
$$;

create or replace function random_movie() returns integer language sql as
$$
select id from movies tablesample system_rows(10) order by random() limit 1
$$;

insert into movies_genres(movie_id, genre_id)
select id,
random_genre() 
from movies;

insert into movies_genres(movie_id, genre_id)
select id,
(select g.id from genres g where g.id not in (select mg.genre_id from movies_genres mg where mg.movie_id = movies.id) order by random() limit 1)
from movies;

------------screening_rooms--------------
insert into screening_rooms(number_of_rows, row_length)
SELECT floor(5 + random() * 5),
floor(5 + random() * 5)
from generate_series(1,20) as seq(id);

create or replace function random_screening_room() returns integer language sql as
$$
select id from screening_rooms tablesample system_rows(10) order by random() limit 1
$$;

-----------screenings------------------
insert into screenings(start, movie_id,screening_room_id)
SELECT 
CURRENT_timestamp - INTERVAL '2 years' + random() * interval '3 years',
random_movie(),
random_screening_room()
from generate_series(1,200000) as seq(id);

-----------seats---------
CREATE OR REPLACE FUNCTION numberOfSeats (sr_id INTEGER) RETURNS INTEGER AS 
$$ 
BEGIN
   return (SELECT number_of_rows * row_length  from screening_rooms where id = sr_id); 
END ; 
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION rowLength(sr_id INTEGER) RETURNS INTEGER AS 
$$ 
BEGIN
      return (SELECT row_length from screening_rooms where id = sr_id); 
END ; 
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION insertSeats() RETURNS void AS 
$$ 
DECLARE
   srId INTEGER := 1; 
   maxId integer := 0;
   seatNumber INTEGER := 0;
BEGIN
      select max(id) from screening_rooms into maxId;
    
    while srId <= maxId LOOP 
      seatNumber := 1;

      while seatNumber <= numberOfSeats(srId) LOOP
        insert into seats(row_number,seat_number,screening_room_id )
        select floor(seatNumber / rowLength(srId))::integer +1, seatNumber, srId;
        seatNumber := seatNumber + 1;
      END LOOP;
      
      srId := srId + 1 ; 
   END LOOP ;
   
END ; 
$$ LANGUAGE plpgsql;

select insertSeats();

---------customers----------------
INSERT into customers(first_name, last_name, age)
select
random_first_name(),
random_last_name(),
floor(14 + random() * 30)
from generate_series(1,500000) as seq(id);

UPDATE customers set
email = lower(first_name) || '.' || lower(last_name) || '@email.com';

--------orders-------------
create or replace function random_customer() returns integer language sql as
$$
select id from customers tablesample system_rows(10) order by random() limit 1
$$;

create or replace function random_screening() returns integer language sql as
$$
select id from screenings tablesample system_rows(10) order by random() limit 1
$$;

INSERT into orders(customer_id,created_at, is_confirmed, screening_id)
SELECT
random_customer(),
CURRENT_timestamp - INTERVAL '2 years' + random() * INTERVAL '2 years', 
case  when random() > 0.7 then false else true end,
random_screening()
from generate_series(1,500000) as seq(id);

---------ticket_types------------
insert into ticket_types(type) values ('detsky'), ('studentsky'), ('dospelacky'), ('senior');

update ticket_types
set price = (select floor(5 + random() * 5)::INTEGER);

--------discount_coupons-------------

--create index o_customer_id on orders(customer_id);

INSERT into discount_coupons(is_valid,order_id,customer_id)   --neplatne, pouzite na objednavku
select 
false,
(select id from orders o where o.customer_id = c.id limit 1),
c.id
from customers c 
where EXISTS (SELECT null from orders where is_confirmed = true and customer_id = c.id)
and random() > 0.5;

INSERT into discount_coupons(is_valid,customer_id)    --platne
select 
true,
c.id
from customers c 
where EXISTS (SELECT null from orders where customer_id = c.id) -- s tymto je to rychlejsie, menej kontroluje customer_id fkey potom
and random() < 0.3;

--update discount_coupons set number = id::varchar;

--------tickets--------------------
create or replace function random_ticket_type() returns integer language sql as
$$
select id from ticket_types tablesample system_rows(10) order by random() limit 1
$$;

insert into tickets(order_id,customer_id,ticket_type_id, screening_id)  
SELECT o.id, o.customer_id,
random_ticket_type(),
o.screening_id
from orders o;

--create index seats_sr_id on seats(screening_room_id);

update tickets SET 
seat_id = CASE WHEN (SELECT is_confirmed FROM orders o WHERE o.id = tickets.order_id) = true THEN
	(select id from seats where 
           seats.screening_room_id = (select screening_room_id from screenings where screenings.id = tickets.screening_id)
            order by random() limit 1)
           ELSE NULL end,
sold_for = (select price from ticket_types tt where tt.id = tickets.ticket_type_id);
--WHERE (SELECT is_confirmed FROM orders o WHERE o.id = tickets.order_id) = true,


-----zmazeme pomocne

drop table first_names, last_names cascade;
drop function random_first_name();
drop function random_last_name();
drop function random_genre();
drop function random_movie();
drop function random_screening_room();
drop function random_customer();
drop function random_screening();
drop function random_ticket_type();

